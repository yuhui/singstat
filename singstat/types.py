# Copyright 2024 Yuhui. All rights reserved.
#
# Licensed under the GNU General Public License, Version 3.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.gnu.org/licenses/gpl-3.0.html
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""SingStat custom types for client methods' responses."""

from datetime import date

from typing import Any, NotRequired, TypeAlias
try:
    from typing import TypedDict
except ImportError:
    TypedDict = dict

Url: TypeAlias = str
"""URL of link."""


class _ResourceIdDataRecordDict(TypedDict):
    """Type definition for _ResourceIdDataDict

    All fields are required. But they are typed as `NotRequired` because
    when the endpoint returns empty data, then this dict has no keys at all.
    """
    id: NotRequired[str]
    """ID"""
    table_type: NotRequired[str]
    """Table type"""
    title: NotRequired[str]
    """Title"""

class _ResourceIdDataDict(TypedDict):
    """Type definition for ResourceIdDict"""
    generated_by: str
    """Generated by"""
    date_generated: date
    """Data generated"""
    total: int
    """Total"""
    records: list[_ResourceIdDataRecordDict]
    """Records"""

class ResourceIdDict(TypedDict):
    """Type definition for resource_id()"""
    data: _ResourceIdDataDict
    """Data"""
    data_count: int
    """Data count"""
    status_code: int
    """Status code"""
    message: str
    """Message"""


class _MetadataDataRecordsRowDict(TypedDict):
    """Type definition for _MetadataDataRecordsDict"""
    series_no: str
    """Series number"""
    row_text: str
    """Row text"""
    uo_m: str
    """Unit of measurement"""
    footnote: str
    """Footnote"""

class _MetadataDataRecordsDict(TypedDict):
    """Type definition for _MetadataDataDict

    All fields are required. But they are typed as `NotRequired` because
    when the endpoint returns empty data, then this dict has no keys at all.
    """
    id: NotRequired[str]
    """ID"""
    title: NotRequired[str]
    """Title"""
    frequency: NotRequired[str]
    """Frequency"""
    data_source: NotRequired[str]
    """Data source"""
    footnote: NotRequired[str]
    """Footnote"""
    data_last_updated: NotRequired[date]
    """Data last updated"""
    start_period: NotRequired[str]
    """Start period"""
    end_period: NotRequired[str]
    """End period"""
    total: NotRequired[int]
    """Total"""
    row: NotRequired[list[_MetadataDataRecordsRowDict]]
    """Row"""

class _MetadataDataDict(TypedDict):
    """Type definition for MetadataDict"""
    generated_by: str
    """Generated by"""
    date_generated: date
    """Date generated"""
    records: _MetadataDataRecordsDict
    """Records"""

class MetadataDict(TypedDict):
    """Type definition for metadata()"""
    data: _MetadataDataDict
    """Data"""
    data_count: int
    """Data count"""
    status_code: int
    """Status code"""
    message: str
    """Message"""


class _TabledataDataRowColumnDict(TypedDict):
    """Type definition for _TabledataDataRowColumnColumnDict, \
        _TabledataDataTimeseriesRowDict, and \
        _TabledataDataCrossSectionalMultiDimensionalCubeRowDict
    """
    key: str
    """Key"""
    value: Any
    """Value"""

class _TabledataDataRowColumnColumnDict(TypedDict):
    """Type definition for \
        _TabledataDataCrossSectionalMultiDimensionalCubeRowDict
    """
    key: str
    """Key"""
    columns: NotRequired[list[_TabledataDataRowColumnDict]]
    """Columns"""

class _TabledataDataTimeseriesRowDict(TypedDict):
    """Type definition for _TabledataDataTimeseriesDict"""
    series_no: str
    """Series number"""
    row_text: str
    """Row text"""
    uo_m: str
    """Unit of measurement"""
    footnote: str
    """Footnote"""
    columns: NotRequired[list[_TabledataDataRowColumnDict]]
    """Columns"""

class _TabledataDataCrossSectionalMultiDimensionalCubeRowDict(TypedDict):
    """Type definition for \
        _TabledataDataCrossSectionalMultiDimensionalCubeDict
    """
    row_no: int
    """Row number"""
    row_text: str
    """Row text"""
    uo_m: str
    """Unit of measurement"""
    footnote: str
    """Footnote"""
    columns: NotRequired[
        list[_TabledataDataRowColumnDict | _TabledataDataRowColumnColumnDict]
    ]
    """Columns"""

class _TabledataDataTimeseriesDict(TypedDict):
    """Type definition for _TabledataDict

    All fields are required. But they are typed as `NotRequired` because
    when the endpoint returns empty data, then this dict has no keys at all.
    """
    id: NotRequired[str]
    """ID"""
    title: NotRequired[str]
    """Title"""
    footnote: NotRequired[str]
    """Footnote"""
    frequency: NotRequired[str]
    """Frequency"""
    datasource: NotRequired[str]
    """Data source"""
    generated_by: NotRequired[str]
    """Generated by"""
    data_last_updated: NotRequired[date]
    """Data last updated"""
    date_generated: NotRequired[date]
    """Date generated"""
    offset: NotRequired[int | None]
    """Offset"""
    limit: NotRequired[int]
    """Limit"""
    sort_by: NotRequired[str | None]
    """Sort by"""
    time_filter: NotRequired[str | None]
    """Time filter"""
    between: NotRequired[tuple[int, ...] | None]
    """Between"""
    search: NotRequired[str | None]
    """Search"""
    row: NotRequired[list[_TabledataDataTimeseriesRowDict]]
    """Row"""

class _TabledataDataCrossSectionalMultiDimensionalCubeDict(TypedDict):
    """Type definition for TabledataDict

    All fields are required. But they are typed as `NotRequired` because
    when the endpoint returns empty data, then this dict has no keys at all.
    """
    id: NotRequired[str]
    """ID"""
    table_type: NotRequired[str]
    """Table type"""
    title: NotRequired[str]
    """Title"""
    footnote: NotRequired[str]
    """Footnote"""
    frequency: NotRequired[str]
    """Frequency"""
    data_source: NotRequired[str]
    """Data source"""
    generated_by: NotRequired[str]
    """Generated by"""
    data_last_updated: NotRequired[date]
    """Data last updated"""
    date_generated: NotRequired[date]
    """Date generated"""
    offset: NotRequired[int | None]
    """Offset"""
    limit: NotRequired[int]
    """Limit"""
    between: NotRequired[tuple[int, ...] | None]
    """Between"""
    search: NotRequired[str | None]
    """Search"""
    row: NotRequired[list[_TabledataDataCrossSectionalMultiDimensionalCubeRowDict]]
    """Row"""

class TabledataDict(TypedDict):
    """Type definition for tabledata()"""
    data: _TabledataDataTimeseriesDict | _TabledataDataCrossSectionalMultiDimensionalCubeDict
    """Data"""
    data_count: int
    """Data count"""
    status_code: int
    """Status code"""
    message: str
    """Message"""

__all__ = [
    'Url',
    'MetadataDict',
    'ResourceIdDict',
    'TabledataDict',
]
